# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

type Customer {
  Password: String!
  addresses(orderBy: LocationOrderByInput, skip: Float, take: Float, where: LocationWhereInput): [Location!]!
  createdAt: DateTime!
  freedomPay: EnumCustomerFreedomPay
  id: String!
  mobile: Float!
  updatedAt: DateTime!
  username: String!
}

input CustomerCreateInput {
  Password: String!
  freedomPay: EnumCustomerFreedomPay!
  mobile: Float!
  username: String!
}

input CustomerOrderByInput {
  Password: SortOrder
  createdAt: SortOrder
  freedomPay: SortOrder
  id: SortOrder
  mobile: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input CustomerUpdateInput {
  Password: String
  freedomPay: EnumCustomerFreedomPay
  mobile: Float
  username: String
}

input CustomerWhereInput {
  Password: StringFilter
  freedomPay: EnumCustomerFreedomPay
  id: StringFilter
  mobile: IntFilter
  username: StringFilter
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumCustomerFreedomPay {
  No
  Yes
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Location {
  address: String!
  createdAt: DateTime!
  customer: Customer
  id: String!
  pinCode: String!
  updatedAt: DateTime!
}

input LocationCreateInput {
  address: String!
  customer: CustomerWhereUniqueInput
  pinCode: String!
}

input LocationOrderByInput {
  address: SortOrder
  createdAt: SortOrder
  customerId: SortOrder
  id: SortOrder
  pinCode: SortOrder
  updatedAt: SortOrder
}

input LocationUpdateInput {
  address: String
  customer: CustomerWhereUniqueInput
  pinCode: String
}

input LocationWhereInput {
  address: StringFilter
  customer: CustomerWhereUniqueInput
  id: StringFilter
  pinCode: StringFilter
}

input LocationWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  createLocation(data: LocationCreateInput!): Location!
  createUser(data: UserCreateInput!): User!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteLocation(where: LocationWhereUniqueInput!): Location!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _customersMeta(orderBy: CustomerOrderByInput, skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _locationsMeta(orderBy: LocationOrderByInput, skip: Float, take: Float, where: LocationWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: CustomerOrderByInput, skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  location(where: LocationWhereUniqueInput!): Location
  locations(orderBy: LocationOrderByInput, skip: Float, take: Float, where: LocationWhereInput): [Location!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
